{
  "hash": "f3a9f3761902eac3c3ac1ce3500d930b",
  "result": {
    "markdown": "---\ntitle: Clustering\nauthor: Tahmina Sultana\ndate: '2023-10-28'\ncategories:\n  - python\n  - code\n  - analysis\nimage: cluster.jpg\ndescription: 'Clustering in Machine Learning involves grouping similar data points together based on certain features or characteristics, aiming to discover inherent patterns or structures within the data.'\n---\n\n![Image Source: <https://static.javatpoint.com/tutorial/machine-learning/images/clustering-in-machine-learning.png>](clustering_algorithm_8d26475260.png)\n\n**Contents:**\n\n-   Introduction to Clustering.\n\n-   Different types of clustering.\n\n-   Example of Clustering with [Cardiovascular Disease dataset](https://www.kaggle.com/datasets/sulianova/cardiovascular-disease-dataset).\n\n-   Data Visualization\n\n-   Data processing\n\n-   Model implementation\n\n-   Clustering result visualization\n\n## Clustering\n\nClustering involves the task of grouping a population or data points into distinct clusters, where items within the same cluster share more similarities with each other compared to those in different clusters. Essentially, the goal is to identify and categorize groups with similar characteristics into clusters.\n\nThere are various types of clustering algorithms due to the subjective nature of clustering:\n\n1.  **Connectivity models:** These models rely on the premise that closer data points in the data space exhibit greater similarity. They can start by classifying each point into separate clusters and then merge them as distance decreases, or begin with one cluster and split it as distance increases. Hierarchical clustering is a prominent example of this model.\n\n2.  **Centroid models:** These iterative algorithms gauge similarity based on a point's proximity to cluster centroids. K-Means clustering falls into this category, requiring the number of clusters to be specified beforehand, which demands prior knowledge of the dataset.\n\n3.  **Distribution models:** These models assess the probability that data points in a cluster belong to the same distribution, like Normal or Gaussian. The Expectation-maximization algorithm is an instance, but it tends to overfit the data.\n\n4.  **Density Models:** These algorithms explore data space for areas with varying densities of data points. They identify different density regions and group data points within these regions into the same cluster. DBSCAN and OPTICS are popular examples.\n\nI'll delve deeper into two widely used clustering algorithms: K Means and Hierarchical clustering.\n\n#### 1. KMeans Clustering:\n\nK-Means clustering is an unsupervised technique used to group data without pre-existing labels for training. Instead, it relies on the inherent patterns within independent features to derive insights on unseen data.\n\n![Src: https://www.kaggle.com/code/pythonkumar/clustering-k-means-dbscan-gmm-bgmm-dendogram-viz](1%20b2sO2f--yfZiJazc5rYSpg.gif)\n\n#### **2. Hierarchical Clustering**\n\nHierarchical Clustering, also known as Hierarchical Cluster Analysis (HCA), is an unsupervised clustering method that organizes clusters with a clear top-to-bottom order.\n\nThis algorithm groups similar objects into clusters, resembling the hierarchical organization seen in file and folder structures on a hard disk. The primary goal is to create a set of distinct clusters, each cluster being unique from the others, while objects within each cluster share substantial similarities.\n\nHierarchical clustering is typically classified into two types:\n\n**Agglomerative Hierarchical Clustering**\n\n![Src: https://www.kaggle.com/code/pythonkumar/clustering-k-means-dbscan-gmm-bgmm-dendogram-viz](hierarch.gif)\n\n**Divisive Hierarchical Clustering**\n\n1.  ![Src: https://www.kaggle.com/code/pythonkumar/clustering-k-means-dbscan-gmm-bgmm-dendogram-viz](Conceptual-dendrogram-for-agglomerative-and-divisive-Hierarchical-based-clustering-19.jpeg)\n\n#### **3. Density Based(DBSCAN)**\n\n![Src: https://www.kaggle.com/code/pythonkumar/clustering-k-means-dbscan-gmm-bgmm-dendogram-viz](DBSCAN_tutorial.gif)\n\nDBSCAN (Density-based spatial clustering of applications with noise) is an algorithm designed to identify clusters of varying shapes and sizes within a dataset, even in the presence of noise and outliers.\n\nThe algorithm relies on two key parameters:\n\n-   **minPts:** This threshold determines the minimum number of points required to be clustered together for a region to be recognized as dense.\n\n-   **eps (Îµ):** A distance measurement used to locate neighboring points around any given point.\n\nAfter completing the DBSCAN clustering, three types of points emerge:\n\n-   **Core:** These points have at least m neighboring points within a distance of n from themselves.\n\n-   **Border:** Points classified as Border have at least one Core point within a distance of n.\n\n-   **Noise:** These points neither qualify as Core nor Border points. They have fewer than m neighboring points within a distance of n from themselves.\n\n#### **4. Gaussian Mixture Model**\n\nGaussian Mixture Models (GMMs) models assume multiple Gaussian distributions, each representing a cluster. GMMs use a soft clustering approach, probabilistically assigning data points to different clusters. The algorithm comprises two steps: the Expectation (E) step and the Maximization (M) step.\n\n![Src: <https://www.kaggle.com/code/pythonkumar/clustering-k-means-dbscan-gmm-bgmm-dendogram-viz>](5_clusters_QGMM.gif)\n\n## KModes Clustering using Cardio Data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='darkgrid', font_scale=1.4)\nfrom kmodes.kmodes import KModes\n\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn.cluster import KMeans \nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import MinMaxScaler\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf = pd.read_csv('/home/tpriya/CS5525/MLBlog/posts/post-with-code/cardio_train.csv', sep=\";\")\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>ap_hi</th>\n      <th>ap_lo</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>alco</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>18393</td>\n      <td>2</td>\n      <td>168</td>\n      <td>62.0</td>\n      <td>110</td>\n      <td>80</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>20228</td>\n      <td>1</td>\n      <td>156</td>\n      <td>85.0</td>\n      <td>140</td>\n      <td>90</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>18857</td>\n      <td>1</td>\n      <td>165</td>\n      <td>64.0</td>\n      <td>130</td>\n      <td>70</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>17623</td>\n      <td>2</td>\n      <td>169</td>\n      <td>82.0</td>\n      <td>150</td>\n      <td>100</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>17474</td>\n      <td>1</td>\n      <td>156</td>\n      <td>56.0</td>\n      <td>100</td>\n      <td>60</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>69995</th>\n      <td>99993</td>\n      <td>19240</td>\n      <td>2</td>\n      <td>168</td>\n      <td>76.0</td>\n      <td>120</td>\n      <td>80</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>69996</th>\n      <td>99995</td>\n      <td>22601</td>\n      <td>1</td>\n      <td>158</td>\n      <td>126.0</td>\n      <td>140</td>\n      <td>90</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>69997</th>\n      <td>99996</td>\n      <td>19066</td>\n      <td>2</td>\n      <td>183</td>\n      <td>105.0</td>\n      <td>180</td>\n      <td>90</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>69998</th>\n      <td>99998</td>\n      <td>22431</td>\n      <td>1</td>\n      <td>163</td>\n      <td>72.0</td>\n      <td>135</td>\n      <td>80</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>69999</th>\n      <td>99999</td>\n      <td>20540</td>\n      <td>1</td>\n      <td>170</td>\n      <td>72.0</td>\n      <td>120</td>\n      <td>80</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>70000 rows Ã 13 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#removing Outliers\n# Let's remove weights and heights, that fall below 2.5% or above 97.5% of a given range.\ndf.drop(df[(df['height'] > df['height'].quantile(0.975)) | (df['height'] < df['height'].quantile(0.025))].index,inplace=True)\ndf.drop(df[(df['weight'] > df['weight'].quantile(0.975)) | (df['weight'] < df['weight'].quantile(0.025))].index,inplace=True)\n\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(\"Diastilic pressure is higher than systolic one in {0} cases\".format(df[df['ap_lo']> df['ap_hi']].shape[0]))\ndf.drop(df[(df['ap_hi'] > df['ap_hi'].quantile(0.975)) | (df['ap_hi'] < df['ap_hi'].quantile(0.025))].index,inplace=True)\ndf.drop(df[(df['ap_lo'] > df['ap_lo'].quantile(0.975)) | (df['ap_lo'] < df['ap_lo'].quantile(0.025))].index,inplace=True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDiastilic pressure is higher than systolic one in 1082 cases\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>ap_hi</th>\n      <th>ap_lo</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>alco</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n      <td>60142.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>49895.698065</td>\n      <td>19468.719979</td>\n      <td>1.347311</td>\n      <td>164.554854</td>\n      <td>73.426805</td>\n      <td>125.770526</td>\n      <td>81.046307</td>\n      <td>1.350953</td>\n      <td>1.220229</td>\n      <td>0.085631</td>\n      <td>0.051877</td>\n      <td>0.803648</td>\n      <td>0.488228</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>28840.467755</td>\n      <td>2460.510296</td>\n      <td>0.476120</td>\n      <td>6.830174</td>\n      <td>11.614806</td>\n      <td>13.761847</td>\n      <td>8.239157</td>\n      <td>0.670076</td>\n      <td>0.567607</td>\n      <td>0.279820</td>\n      <td>0.221781</td>\n      <td>0.397241</td>\n      <td>0.499866</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>10798.000000</td>\n      <td>1.000000</td>\n      <td>150.000000</td>\n      <td>52.000000</td>\n      <td>100.000000</td>\n      <td>60.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>24867.500000</td>\n      <td>17677.250000</td>\n      <td>1.000000</td>\n      <td>160.000000</td>\n      <td>65.000000</td>\n      <td>120.000000</td>\n      <td>80.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>49902.500000</td>\n      <td>19705.000000</td>\n      <td>1.000000</td>\n      <td>165.000000</td>\n      <td>72.000000</td>\n      <td>120.000000</td>\n      <td>80.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>74745.750000</td>\n      <td>21321.000000</td>\n      <td>2.000000</td>\n      <td>169.000000</td>\n      <td>80.000000</td>\n      <td>135.000000</td>\n      <td>90.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>99999.000000</td>\n      <td>23713.000000</td>\n      <td>2.000000</td>\n      <td>180.000000</td>\n      <td>106.000000</td>\n      <td>163.000000</td>\n      <td>100.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# transforming the column AGE(measured in days) for Years\ndf['years'] = (df['age'] / 365).round().astype('int')\ndf.drop(['age'], axis='columns', inplace=True)\ndf.drop(['id'], axis='columns', inplace=True)\n\n# age_bin in quinquenium 5 years spam\ndf['age_bin'] = pd.cut(df['years'], [0,20,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], \n                              labels=['0-20', '20-30', '30-35', '35-40','40-45','45-50','50-55','55-60','60-65','65-70','70-75','75-80','80-85','85-90','90-95','95-100'])\n\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Adding Body Mass Index\ndf['bmi'] = df['weight']/((df['height']/100)**2)\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# transforming the column bmi in Body Mass Index Classes (1 to 6)\nrating = []\nfor row in df['bmi']:\n    if row < 18.5 :    rating.append(1) #UnderWeight\n    elif row > 18.5 and row  < 24.9:   rating.append(2)#NormalWeight\n    elif row > 24.9 and row < 29.9:  rating.append(3)#OverWeight\n    elif row > 29.9 and row < 34.9:  rating.append(4)#ClassObesity_1\n    elif row > 34.9 and row < 39.9:  rating.append(5)#ClassObesity_2\n    elif row > 39.9 and row < 49.9:  rating.append(6)#ClassObesity_3\n    elif row > 49.9:  rating.append('Error')\n        \n    else:           rating.append('Not_Rated')\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf['BMI_Class'] = rating\ndf[\"BMI_Class\"].value_counts(normalize=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nBMI_Class\n3    0.391773\n2    0.361943\n4    0.179209\n5    0.055801\n6    0.009162\n1    0.002112\nName: proportion, dtype: float64\n```\n:::\n:::\n\n\nMean Arterial Pressure (MAP) = 2 Diastollic Blood Pressure + Sistolic Blood Pressure / 3\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf['MAP'] = ((2* df['ap_lo']) + df['ap_hi']) / 3\n#Creating Classes for MAP\nmap_values = []\nfor row in df['MAP']:\n    if row < 69.9:    map_values.append(1) #Low\n    elif row > 70 and row  < 79.9:   map_values.append(2)#Normal\n    elif row > 79.9 and row < 89.9:  map_values.append(3)#Normal\n    elif row > 89.9 and row < 99.9:  map_values.append(4)#Normal\n    elif row > 99.9 and row < 109.9:  map_values.append(5)#High\n    elif row > 109.9 and row < 119.9:  map_values.append(6)#Normal\n    elif row > 119.9:  map_values.append(7)\n        \n    else:           map_values.append('Not_Rated')\n#inserting MAP_Class Column\ndf['MAP_Class'] = map_values\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Reordering Columns\ndf= df[[\"gender\",\"height\",\"weight\",\"bmi\",\"ap_hi\",\"ap_lo\",\"MAP\",\"years\",\"age_bin\",\"BMI_Class\",\"MAP_Class\",\"cholesterol\",\"gluc\",\"smoke\",\"active\",\"cardio\"]]\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>bmi</th>\n      <th>ap_hi</th>\n      <th>ap_lo</th>\n      <th>MAP</th>\n      <th>years</th>\n      <th>age_bin</th>\n      <th>BMI_Class</th>\n      <th>MAP_Class</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>168</td>\n      <td>62.0</td>\n      <td>21.967120</td>\n      <td>110</td>\n      <td>80</td>\n      <td>90.000000</td>\n      <td>50</td>\n      <td>45-50</td>\n      <td>2</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>156</td>\n      <td>85.0</td>\n      <td>34.927679</td>\n      <td>140</td>\n      <td>90</td>\n      <td>106.666667</td>\n      <td>55</td>\n      <td>50-55</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>165</td>\n      <td>64.0</td>\n      <td>23.507805</td>\n      <td>130</td>\n      <td>70</td>\n      <td>90.000000</td>\n      <td>52</td>\n      <td>50-55</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>169</td>\n      <td>82.0</td>\n      <td>28.710479</td>\n      <td>150</td>\n      <td>100</td>\n      <td>116.666667</td>\n      <td>48</td>\n      <td>45-50</td>\n      <td>3</td>\n      <td>6</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>156</td>\n      <td>56.0</td>\n      <td>23.011177</td>\n      <td>100</td>\n      <td>60</td>\n      <td>73.333333</td>\n      <td>48</td>\n      <td>45-50</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Data Analize and Preparation\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf_cat = df[[\"gender\",\"age_bin\",\"BMI_Class\",\"MAP_Class\",\"cholesterol\",\"gluc\",\"smoke\",\"active\",\"cardio\",]]\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf_cat = df_cat.apply(le.fit_transform)\ndf_cat.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>age_bin</th>\n      <th>BMI_Class</th>\n      <th>MAP_Class</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>3</td>\n      <td>2</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_male = df_cat.query(\"gender == 0\")\ndf_female = df_cat.query(\"gender == 1\")\ndf_male.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>age_bin</th>\n      <th>BMI_Class</th>\n      <th>MAP_Class</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>6</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nf, axs = plt.subplots(1,3,figsize = (12,5))\nsns.countplot(x=df_cat['MAP_Class'],order=df_cat['MAP_Class'].value_counts().index,hue=df_cat['cardio'],ax=axs[0])\nsns.countplot(x=df_male['MAP_Class'],order=df_male['MAP_Class'].value_counts().index,hue=df_male['cardio'],ax=axs[1])\nsns.countplot(x=df_female['MAP_Class'],order=df_female['MAP_Class'].value_counts().index,hue=df_female['cardio'],ax=axs[2])\n\naxs[0].set_title('All Data')\naxs[1].set_title('Male Data')\naxs[2].set_title('Female Data')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=1124 height=453}\n:::\n:::\n\n\nAll the values are similar\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nf, axs = plt.subplots(1,3,figsize = (12,5))\nsns.countplot(x=df_cat['BMI_Class'],order=df_cat['BMI_Class'].value_counts().index,hue=df_cat['cardio'],ax=axs[0])\nsns.countplot(x=df_male['BMI_Class'],order=df_male['BMI_Class'].value_counts().index,hue=df_male['cardio'],ax=axs[1])\nsns.countplot(x=df_female['BMI_Class'],order=df_female['BMI_Class'].value_counts().index,hue=df_female['cardio'],ax=axs[2])\n\naxs[0].set_title('All Data')\naxs[1].set_title('Male Data')\naxs[2].set_title('Female Data')\nplt.tight_layout()\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){width=1124 height=453}\n:::\n:::\n\n\nThe BMI classes across all data, as well as for males and females, are quite similar. However, there's a slight variance in the BMI_Class = 2 specifically for the female dataset.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nf, axs = plt.subplots(1,3,figsize = (12,5))\nsns.countplot(x=df_cat['gluc'],order=df_cat['gluc'].value_counts().index,hue=df_cat['cardio'],ax=axs[0])\nsns.countplot(x=df_male['gluc'],order=df_male['gluc'].value_counts().index,hue=df_male['cardio'],ax=axs[1])\nsns.countplot(x=df_female['gluc'],order=df_female['gluc'].value_counts().index,hue=df_female['cardio'],ax=axs[2])\n\naxs[0].set_title('All Data')\naxs[1].set_title('Male Data')\naxs[2].set_title('Female Data')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){width=1124 height=453}\n:::\n:::\n\n\nAll the values are similar\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nf, axs = plt.subplots(1,3,figsize = (12,5))\nsns.countplot(x=df_cat['cholesterol'],order=df_cat['cholesterol'].value_counts().index,hue=df_cat['cardio'],ax=axs[0])\nsns.countplot(x=df_male['cholesterol'],order=df_male['cholesterol'].value_counts().index,hue=df_male['cardio'],ax=axs[1])\nsns.countplot(x=df_female['cholesterol'],order=df_female['cholesterol'].value_counts().index,hue=df_female['cardio'],ax=axs[2])\n\naxs[0].set_title('All Data')\naxs[1].set_title('Male Data')\naxs[2].set_title('Female Data')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){width=1124 height=453}\n:::\n:::\n\n\nAll the values are similar\n\n### KModes Clustering Analysis\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# new df to work\ndf_male = df_cat.query(\"gender == 0\")\ndf_female = df_cat.query(\"gender == 1\")\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Elbow curve to find optimal K in Huang init\ncost = []\nK = range(1,6)\nfor num_clusters in list(K):\n    kmode = KModes(n_clusters=num_clusters, init = \"Huang\", n_init = 5, verbose=0)\n    kmode.fit_predict(df_cat)\n    cost.append(kmode.cost_)\n    \nplt.plot(K, cost, 'bx-')\nplt.xlabel('No. of clusters')\nplt.ylabel('Cost')\nplt.title('Elbow Method For Optimal k')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-1.png){width=658 height=473}\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# female data\n# Building the model with using K-Mode with \"Huang\" initialization\nkm_huang = KModes(n_clusters=2, init = \"Huang\", n_init = 5, verbose=0)\nclusters_huang_1 = km_huang.fit_predict(df_female)\nclusters_huang_1\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\narray([1, 0, 0, ..., 0, 1, 1], dtype=uint16)\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# male data\n# Building the model with using K-Mode with \"Huang\" initialization\nkm_huang = KModes(n_clusters=2, init = \"Huang\", n_init = 5, verbose=0)\nclusters_huang_2 = km_huang.fit_predict(df_male)\nclusters_huang_2\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\narray([0, 1, 1, ..., 0, 0, 0], dtype=uint16)\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndf_female.insert(0,\"Cluster\", clusters_huang_1, True)\n\n# female DataFrame with Clusters\ndf_female.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cluster</th>\n      <th>gender</th>\n      <th>age_bin</th>\n      <th>BMI_Class</th>\n      <th>MAP_Class</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>2</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>1</td>\n      <td>6</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndf_male.insert(0, \"Cluster\", clusters_huang_2, True)\n\n# female DataFrame with Clusters\ndf_male.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cluster</th>\n      <th>gender</th>\n      <th>age_bin</th>\n      <th>BMI_Class</th>\n      <th>MAP_Class</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>0</td>\n      <td>6</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# replacing cluster column values to merge dataframes after\ndf_male[\"Cluster\"].replace({0:2, 1:3}, inplace=True)\ndf_male.head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_23416/1028254110.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_male[\"Cluster\"].replace({0:2, 1:3}, inplace=True)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cluster</th>\n      <th>gender</th>\n      <th>age_bin</th>\n      <th>BMI_Class</th>\n      <th>MAP_Class</th>\n      <th>cholesterol</th>\n      <th>gluc</th>\n      <th>smoke</th>\n      <th>active</th>\n      <th>cardio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>3</td>\n      <td>0</td>\n      <td>6</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# female\nf, axs = plt.subplots(1,3,figsize = (12,5))\nsns.countplot(x=df_female['Cluster'],order=df_female['Cluster'].value_counts().index,hue=df_female['cardio'],ax=axs[0],palette='rainbow')\nsns.countplot(x=df_female['smoke'],order=df_female['smoke'].value_counts().index,hue=df_female['cardio'],ax=axs[1],palette='rainbow')\nsns.countplot(x=df_female['BMI_Class'],order=df_female['BMI_Class'].value_counts().index,hue=df_female['cardio'],ax=axs[2],palette='rainbow')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-28-output-1.png){width=1124 height=452}\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# male\nf, axs = plt.subplots(1,3,figsize = (12,5))\nsns.countplot(x=df_male['Cluster'],order=df_male['Cluster'].value_counts().index,hue=df_male['cardio'],ax=axs[0],palette='rainbow')\nsns.countplot(x=df_male['smoke'],order=df_male['smoke'].value_counts().index,hue=df_male['cardio'],ax=axs[1],palette='rainbow')\nsns.countplot(x=df_male['BMI_Class'],order=df_male['BMI_Class'].value_counts().index,hue=df_male['cardio'],ax=axs[2],palette='rainbow')\n\nplt.tight_layout()\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-29-output-1.png){width=1124 height=452}\n:::\n:::\n\n\n### \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}